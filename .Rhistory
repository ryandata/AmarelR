diamonds[1,1]
diamonds[1:10,1:6]
diamonds[1:10,-1]
# variable/column names
names(diamonds)
# get information about data with summary
ls()
summary(gender_data)
summary(diamonds)
# summarise is the tidyverse way, from dplyr
diamonds %>%
summarise_if(is.numeric, mean, na.rm=TRUE)
# computing a new variable
diamonds$price_per_carat <- price/carat
attach(diamonds)
summary(price_per_carat)
plot(price_per_carat)
plot(price_per_carat ~ x)
# R has a range of quick functions for descriptive statistics
sd(price_per_carat)  # generates error
sd(price_per_carat, na.rm=TRUE)
var(price_per_carat, na.rm=TRUE)
var(price_per_carat, na.rm=TRUE)
median(price_per_carat, na.rm=TRUE)
quantile(price_per_carat, na.rm=TRUE)
# even a histogram
hist(price_per_carat)
# creating a quick table to count observations
table(cut)
table(cut,clairy)
table(cut,clarity)
# statistical tests in R are easy if you locate the correct command (in the help)
# t-test usage illustrated below
t.test(price_per_carat)
t.test(price_per_carat, mu=5)
t.test(price_per_carat, mu=3900)
t.test(price_per_carat, mu=4000)
t.test(price_per_carat, mu=3900, conf.level=.99)
?t.test
# with no intercept, add -1
lm(price_per_carat~x-1)
t.test(price_per_carat, mu=3900, conf.level=.99)
?t.test
# linear regression
lm(price_per_carat~x)
# with no intercept, add -1
lm(price_per_carat~x-1)
# to get full regression output, use summary
summary(lm(price_per_carat~x))
# multiple explanatory variables? just use +
summary(lm(price_per_carat~x+y))
# we can store (and use) a regression output as an R object
regoutput<-lm(price_per_carat~x)
names(regoutput)
regoutput$residuals
# predicted values
predict(regoutput)
# analysis of variance (anova)
anova(regoutput)
# we can store (and use) a regression output as an R object
regoutput<-lm(price_per_carat~x)
names(regoutput)
regoutput$residuals
# predicted values
predict(regoutput)
# analysis of variance (anova)
anova(regoutput)
# we can also easily pull up regression diagnostic plots
plot(regoutput, pch=3)
library(RColorBrewer)
# base R
plot(price~carat)
abline(lm(price~carat), col="red")
plot(price~carat, col="steelblue", pch=3, main="Diamond Data", xlab="weight of diamond in carats",
ylab="price of diamond in dollars", xlim=c(0,3))
# ggplot
ggplot(diamonds, aes(x=carat,y=price)) + geom_point()
ggplot(diamonds, aes(x=carat,y=price)) + facet_wrap(clarity) + geom_point()
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=cut))
ggplot(diamonds, aes(x=carat,y=price)) + xlim(0,3) + geom_point(colour="steelblue", pch=3) +
labs(x="weight of diamond in carats", y="price of diamond in dollars", title="Diamond Data")
# save graph as R object
mygraph <- ggplot(diamonds, aes(x=carat,y=price)) + xlim(0,3) + geom_point(colour="steelblue", pch=3) +
labs(x="weight of diamond in carats", y="price of diamond in dollars", title="Diamond Data")
# export to PDF (or JPEG, PNG)
pdf(file="output.pdf")
ggplot(diamonds, aes(clarity)) + facet_grid(.~cut) + geom_bar(position="dodge")
ggplot(diamonds, aes(x=carat,y=price)) + xlim(0,3) + geom_point(colour="steelblue", pch=3) +
labs(x="weight of diamond in carats", y="price of diamond in dollars", title="Diamond Data")
dev.off()
jpeg(file="output.jpg", width = 800, height = 600, quality=100)
ggplot(diamonds, aes(depth))+geom_histogram(aes(fill = ..count..))
dev.off()
# histogram
ggplot(diamonds, aes(depth))+geom_histogram()
ggplot(diamonds, aes(depth))+geom_histogram(aes(fill = ..count..))
# using the power
mydata <- ggplot(diamonds, aes(clarity)) +facet_grid(.~cut)
mytheme <- theme(panel.background = element_rect(fill='lightblue', colour='darkgrey'))
mychart <- geom_bar(position="dodge", fill="thistle", color="black")
mydata+mytheme+mychart
# regression
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(method=lm)
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + stat_smooth()
ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point() + stat_smooth()
# getting fancy
# first with scales
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth()
2+2
Getwd()
getwd()
getwd
funkyadd <- function(x,y)
{x+y+1}
ls()
funkyadd()
funkyadd(2,3)
funkyadd
funkyadd <- function(x=1,y=1)
{x+y+1}
funkyadd()
?function
()
?function()
# R has a full range of statistical methods such as sampling and probability distributions
sample(1:100,10)
# R has a full range of statistical methods such as sampling and probability distributions
sample(1:100,10)
# R has a full range of statistical methods such as sampling and probability distributions
sample(1:100,10)
rnorm(10)
rnorm(10, mean=100, sd=20)
# the R help system is easy to access
?sample
?rnorm
# load packages
library(tidyverse)
r
# check help again
?tidyverse
library(help=tidyverse)
??tidy
# get data
data(diamonds)
?diamonds
diamonds
carat
detach(diamonds)
carat
View(diamonds)
data(mtcars)
mtcars
names(mtcars)
mpg
diamonds$carat
carat
attach(diamonds)
carat
# matrix notation [row,column]
diamonds[1,1]
diamonds[1:10,1:6]
diamonds[1:10,-1]
# variable/column names
names(diamonds)
# get information about data with summary
ls()
summary(diamonds)
# summarise is the tidyverse way, from dplyr
diamonds %>%
summarise_if(is.numeric, mean, na.rm=TRUE)
# computing a new variable
diamonds$price_per_carat <- price/carat
attach(diamonds)
summary(price_per_carat)
plot(price_per_carat)
plot(price_per_carat ~ x)
# R has a range of quick functions for descriptive statistics
sd(price_per_carat)
sd(price_per_carat, na.rm=TRUE)
var(price_per_carat, na.rm=TRUE)
median(price_per_carat, na.rm=TRUE)
quantile(price_per_carat, na.rm=TRUE)
?quantile
# even a histogram
hist(price_per_carat)
# creating a quick table to count observations
table(cut)
table(cut,clarity)
# statistical tests in R are easy if you locate the correct command (in the help)
# t-test usage illustrated below
t.test(price_per_carat)
t.test(price_per_carat, mu=4000)
?t.test
# linear regression
lm(price_per_carat~x)
# with no intercept, add -1
lm(price_per_carat~x-1)
# to get full regression output, use summary
summary(lm(price_per_carat~x))
# multiple explanatory variables? just use +
summary(lm(price_per_carat~x+y))
# we can store (and use) a regression output as an R object
regoutput<-lm(price_per_carat~x)
names(regoutput)
regoutput$residuals
# predicted values
predict(regoutput)
# analysis of variance (anova)
anova(regoutput)
# we can also easily pull up regression diagnostic plots
plot(regoutput, pch=3)
library(RColorBrewer)
# base R
plot(price~carat)
abline(lm(price~carat), col="red")
plot(price~carat, col="steelblue", pch=3, main="Diamond Data", xlab="weight of diamond in carats",
ylab="price of diamond in dollars", xlim=c(0,3))
# ggplot
ggplot(diamonds, aes(x=carat,y=price)) + geom_point()
ggplot(diamonds, aes(x=carat,y=price)) + facet_wrap(clarity) + geom_point()
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=cut))
labs(x="weight of diamond in carats", y="price of diamond in dollars", title="Diamond Data")
ggplot(diamonds, aes(x=carat,y=price)) + xlim(0,3) + geom_point(colour="steelblue", pch=3) +
labs(x="weight of diamond in carats", y="price of diamond in dollars", title="Diamond Data")
mydata <- ggplot(diamonds, aes(clarity)) +facet_grid(.~cut)
mytheme <- theme(panel.background = element_rect(fill='lightblue', colour='darkgrey'))
mychart <- geom_bar(position="dodge", fill="thistle", color="black")
mydata+mytheme+mychart
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(method=lm)
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + stat_smooth()
# readr
# importing data with readr
# start with a tab-separated file
download.file("https://ryanwomack.com/data/myfile.txt", "myfile.txt")
mydata <- read_tsv("myfile.txt")
mydata
# install.packages("readxl")
library(readxl)
download.file("https://ryanwomack.com/data/mydata.xlsx", "mydata.xlsx")
mydata<-read_excel("mydata.xlsx", 1)
# "as" functions in R convert back and forth between formats
# "." notation in base R, "_" notation in tidyverse
as.data.frame(mydata)
as_tibble(iris)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
mean(cars$speed)
mean(cars$dist)
cars
session.Info()
sessionInfo()
sessionInfo()
setwd("/Users/ryanwomack/Downloads/archive")
parkingsample<-read.csv("Parking2014.csv")
parkingsample2<-sample(parkingsample,100000)
nrows(parkingsample)
nrow(parkingsample)
sample(mtcars,3)
?sample
library(dplyr)
parkingsample2<-sample_n(parkingsample,100000)
summary(parkingsample)
parkingsample3<-slice_sample(prop=.05)
parkingsample3<-slice_sample(parkingsample, prop=.05)
summary(parkingsample3)
head(parkingsample3)
# sample or slice data
# parkingsample2<-sample_n(parkingsample,100000)
parkingsample2014<-slice_sample(parkingsample, prop=.05)
?fread
library(data.table)
?View
?View()
View(parkingsample2)
getwd()
setwd("/Users/ryanwomack/Dropbox/R/AmarelR")
library(tidyverse)
library(data.table)
library(bit64)
# import parkingsample
parkingsample <- fread("parking_one_percent_sample.csv")
summary(parkingsample)
cor(parkingsample)
?if.numeric
??if.numeric
is.numeric(parkingsample)
summary(parkingsample)
attach(parkingsample)
cor(as.matrix(parkingsample))
ncol(parkingsample)
names(parkingsample)
summary(parkingsample)
head(parkingsample)
summary(parkingsample)
head(parkingsample)
summary(parkingsample)
mycols<-c(2,3,4,5,7,8,9,17:31, 32, 34, 36, 37)
parksample_nochar <- parkingsample(,-mycols)
parksample_nochar <- parkingsample[,-mycols]
parksample_nochar
parksample_nochar <- parkingsample[,c(2,3,4,5,7,8,9,17:31, 32, 34, 36, 37)]
summary(parksample_nochar)
parksample_nochar <- parkingsample[,-c(2,3,4,5,7,8,9,17:31, 32, 34, 36, 37)]
summary(parksample_nochar)
cor(parkingsample)
names(parkingsample)
# these columns have character or logicial data
# c(2:5,7:9,17:32, 34, 36:44)
parksample_nochar <- parkingsample[,-c(2:5,7:9,17:32, 34, 36:44)]
cor(parkingsample)
# these columns have character data
# c(2:5,7:9,17:32, 34, 36:37)
parksample_nochar <- parkingsample[,-c(2:5,7:9,17:32, 34, 36:37)]
cor(parksample_nochar)
cor(parksample_nochar, na.rm=TRUE)
?cor
cor(parksample_nochar, na.rm=Y)
cor(parksample_nochar, na.rm="TRUE")
cor(parksample_nochar, use="complete.obs")
# note the pairwise complete observations option
cor(parksample_nochar, use="pairwise.complete.obs")
cor(parksample_nochar)
# these columns have character or logicaldata
# c(2:5,7:9,17:32, 34, 36:37)
parksample_nochar <- parkingsample[,-c(2:5,7:9,17:32,34, 36:44)]
# note the pairwise complete observations option
cor(parksample_nochar, use="pairwise.complete.obs")
library(ggcorrplot)
# make correlation matrix
corr <- round(cor(parksample_nochar), 2)
o
# make correlation matrix
corr <- round(cor(parksample_nochar, use="pairwise.complete.obs"), 2)
# Compute a matrix of correlation p-values
p.mat <- cor_pmat(parksample_nochar)
?cor_pmat
# Compute a matrix of correlation p-values
p.mat <- cor_pmat(corr)
ggcorrplot(corr)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
outline.color = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
outline.color = "white",
colors = c("#6D9EC1", "white", "#E46726"))
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
outline.color = "white",
colors = c("red", "white", "blue"))
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
outline.color = "white",
colors = c("red", "white", "green"))
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
outline.color = "white",
colors = c("red", "white", "seablue"))
colors()
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
outline.color = "white",
colors = c("tomato", "white", "turquoise"))
ggcorrplot(corr,
type = "lower",
outline.color = "white",
colors = c("tomato", "white", "turquoise"))
ggcorrplot(corr,
type = "upper",
outline.color = "white",
colors = c("tomato", "white", "turquoise"))
colors()
ggcorrplot(corr,
type = "upper",
outline.color = "white",
colors = c("maroon", "white", "steelblue"))
ggcorrplot(corr, method = "circle",
type = "upper",
p.mat = p.mat,
outline.color = "white",
colors = c("maroon", "white", "steelblue"))
ggcorrplot(corr, method = "circle",
type = "upper",
p.mat = p.mat,
lab = TRUE,
outline.color = "white",
colors = c("maroon", "white", "steelblue"))
ggcorrplot(corr,
type = "upper",
lab = TRUE,
outline.color = "white",
colors = c("maroon", "white", "steelblue"))
ggcorrplot(corr, method = "circle",
type = "upper",
p.mat = p.mat,
outline.color = "white",
colors = c("maroon", "white", "steelblue"))
cor(`Violation Precinct`,`Violation Location`)
cor(`Violation Precinct`,`Violation Location`, use = 'pairwise.complete.obs')
`Violation Precinct`,`Violation Location`
`Violation Precinct`
`Violation Location`
cor(`Issuer Precinct`,`Violation Location`, use = 'pairwise.complete.obs')
regoutput<-lm(`Violation Location`~`Issuer Precinct`)
summary(regoutput)
summary(`Issuer Precinct`)
summary(`Violation Location`)
summary(parksample_nochar)
hist(`Summons Number`)
hist(`Violation Code`)
hist(`Street Code1`)
hist(`Street Code2`)
hist(`Street Code3`)
sample(parksample_nochar,30)
slice(parksample_nochar,30)
?slice
slice_sample(parksample_nochar,30)
slice_sample(parksample_nochar,n=30)
my_data_view<-slice_sample(parksample_nochar,n=30)
View(my_data_view)
glimpse(parkingsample)
table(`Double Parking Violation`)
table(`Hydrant Violation`)
table(`Vehicle Body Type`)
table(`No Standing or Stopping Violation`)
names(parkingsample)
summary(Latitude.x)
summary(`Violation Description`)
table(`Violation Description`)
# turns out the latter columns also are basically all NA's
# let's shrink the data further
parkingsample<-parkingsample[,1:37]
arrange(table(`Violation Description`))
x <- `Violation Description`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
names(parkingsample)
x <- `Violation Post Code`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
names(parkingsample)
x <- `Feet From Curb`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
x <- `Meter Number`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
names(parkingsample)
x <- `Vehicle Make`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
x <- `Issuing Agency`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
names(parkingsample)
x <- `Issuing Agency`
x <- `Vehicle Color`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
x <- `Vehicle Year`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
names(parkingsample)
x <-`Violation Legal Code`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
x<-`Violation In Front Of Or Opposite`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
names(parkingsample)
x <- `Issuer Command`
names(parkingsample)
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
x <- `Violation Time`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
x <- `Time First Observed`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
x <- `Violation County`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
names(parkingsample)
x <- `Vehicle Body Type`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
x <- `Plate Type`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
x <- `Registration State`
table(x) %>%
as.data.frame() %>%
arrange(desc(Freq))
